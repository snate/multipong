\section{Experimental evaluation}

In this section, we evaluate through different tests some interesting metrics
related to network activity. We used the following smartphones: 3 Samsung S5,
1 Samsung S3, 1 LG Nexus 5, 1 LG Nexus 5X, 1 LG Leon, 1 LG Spirit, 1 HTC Desire
S, 1 Honor 6, 1 Motorola Moto G 2013, 1 Motorola Moto X+1 2014, 1 Huawei P8
Lite.

\subsection{TCP and UDP packet RTT and payload}
We use TCP for message exchange during the game formation phase, thus an interesting metric lies in application packet's RTT\footnote{for RTT we mean the time, measured at application layer, to deliver a packet and receive the correspondent ack} and payload.

We computed the RTT by measuring, each time a peer sends a message, the delta
elapsed between the start of sending and an application-level confirmation of
delivery . Even if it is done at the application level, we believe that this
approach yields a realistic approximation of the RTT.
However, this method is affected by the variability of the network and
interferences, so we decided to take several measures and then average them.
Also, there is an overhead due to the time spent by the operating system to
manage the communication among devices.

For the TCP payload evaluation, we generated some logs in the application to get the exact size of each type of message. Messages always carry the same data structure and length, so in this case it is not necessary to calculate a mean value.

As for the TCP packets, we are interested in UDP RTT and payload statistics, so we measured them with the same approaches.

\subsection{\wifi{} traffic}

A more interesting evaluation is about general traffic over \wifi. The
application was designed to minimize message exchange among peers, so we were
interested in knowing how much traffic our application generates. To determine
that we decided to sum up the sizes of the packets peers exchanged among
themselves.
Though this approach works at the application layer, it is able to provide
interesting insights into the amount of data exchanged by peers. We explored
other solutions, but they were not suitable for our purposes for the following
reasons:

\begin{itemize}
  \item 3GWatchdog\footnote{\url{http://3gwatchdog.fr/}} and similar
    applications in the Google Play Store do not provide accurate measures
    compared to our solutions;
  \item tPacketCapture\footnote{\url{http://www.taosoftware.co.jp/en/android/packetcapture/}}
    is an application that sets up a VPN to monitor traffic; after setting up
    the VPN, we were not able to make the devices communicate to each other
    even for the match formation;
  \item PacketCapture\footnote{\url{https://play.google.com/store/apps/details?id=app.greyshirts.sslcapture}}
    is an application that monitors network traffic. Though it is accurate and
    does not hinder playing the game, PacketCapture generates one single log
    file per packet sent, so it was not a suitable choice to run our
    experimental evaluation;
  \item phones require to be rooted in order to use \texttt{tcpdump} or
    Wireshark directly by the phone (and we did not have this possibility);
  \item despite we were able to connect to a \wifi{} Direct network from a
    computer, we did not manage to sniff the communication by using Wireshark
    since we were able to capture only the packets sent from and to the GO;
  \item we did not have dedicated hardware (e.g. a wirelesse network controller, 
    such as Alfa One) to sniff traffic directly by the phone, but we believe 
    that this approach would not have resulted in a tangible gain in accuracy.
\end{itemize}

Multipong, anyway, generates different amounts of traffic in the various
phases. In fact, during the game creation the traffic is way more variable than
in the gameplay phase, mainly due to unstable number of peers and \wifi{}
interferences and so we decided to show these two phases separately.

This approach made us able to minimize the variability due to interferences, 
but the number of peers was still affecting considerably these measurements. 
So, we decided to group them by number of peers; more precisely, we chose to 
make 2-, 3- and 4-player matches. The comparison among these groups reveals 
the influence of the pairing phase to the traffic.

\subsection{Battery Consumption}

Usually, apps which do a massive use of \wifi{} are also highly energy-consuming. 
One of our minor purposes was to optimize the battery-life of the devices 
running our application, so we decided to track power consumption over the 
game. We identified a nice tool for energy monitoring in \textit{PowerTutor} 
(PT hereafter), a free application available on Google Play Store, widely used 
by the Android Development community. Clearly, this kind of applications are not 
able to do physical measures of the energy consumption, they just estimate it 
through a mathematical model created over results retrieved from some Android 
devices\footnote{in this case HTC G1, G2, G3 and Nexus One, though we were not 
able to run our application over these phones}.

This approach is however considered quite reliable in those cases where energy 
monitoring is not the core of the observation. We decided to compare energy 
consumption in multiplayer mode with different number of players, and because of 
different traffic on GOs and NGOs we also decided to consider separately these 
two scenarios.

Also, in order to reduce the variability of the variance, we implemented an AI
that plays a match, losing exactly after ten turns.
